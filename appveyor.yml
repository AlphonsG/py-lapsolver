environment:
  TWINE_USERNAME: cheind
  TWINE_PASSWORD:
    secure: hnxMBvmJAGM1rQVOUbkGvQ==

  matrix:
    fast_finish: true
    # http://www.appveyor.com/docs/installed-software#python
    - PYTHON: "C:\\Miniconda36-x64"
      PYTHON_VERSION: "3.6"
      PYTHON_ARCH: "64"    
    - PYTHON: "C:\\Miniconda36"
      PYTHON_VERSION: "3.6"
      PYTHON_ARCH: "32"    
    - PYTHON: "C:\\Miniconda35-x64"
      PYTHON_VERSION: "3.5"
      PYTHON_ARCH: "64"    
    - PYTHON: "C:\\Miniconda35"
      PYTHON_VERSION: "3.5"
      PYTHON_ARCH: "32"

install:
  - set "CONDA_ROOT=%PYTHON%"
  - set "PATH=%CONDA_ROOT%;%CONDA_ROOT%\Scripts;%CONDA_ROOT%\Library\bin;%PATH%"
  - conda config --set always_yes yes
  - conda update -q conda
  - conda config --set auto_update_conda no
  #- conda update -q --all
  - conda install -q pip pytest numpy cmake
  - git submodule update --init --recursive

build_script:
  - python setup.py sdist
  - python setup.py bdist_wheel

test_script:
  # Try building source wheel and install  
  - ps: >-
      $wheel = cmd /r dir .\dist\*.tar.gz /b/s;
      pip install --verbose $wheel
  - pytest --pyargs fast_hungarian
  - pip uninstall -y fast-hungarian
  # Try building binary wheel and install
  - ps: >-
      $wheel = cmd /r dir .\dist\*.whl /b/s;
      pip install --verbose $wheel  
  - pytest --pyargs fast_hungarian
  - pip uninstall -y fast-hungarian

after_test:
  - ps: >-
      if ($env:APPVEYOR_REPO_TAG -eq "true" -And $env:APPVEYOR_REPO_BRANCH -eq "master") {
        Write-Output "Deploying to PyPi"
        Invoke-Expression "python -m pip install twine"
        Invoke-Expression "python -m twine upload --skip-existing dist\\*.whl"
      }
  
artifacts:
  - path: "dist\\*.whl"
  - path: "dist\\*.tar.gz"
    name: Wheels

notifications:
  - provider: Email
    to:
      - christoph.heindl@email.com
    on_build_success: true
    on_build_failure: true
